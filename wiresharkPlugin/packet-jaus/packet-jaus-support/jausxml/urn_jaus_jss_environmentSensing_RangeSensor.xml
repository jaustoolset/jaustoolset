<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<service_def name="RangeSensor" id="urn:jaus:jss:environmentSensing:RangeSensor" version="2.0" xmlns="urn:jaus:jsidl:1.1" xmlns:ns2="urn:jaus:jsidl:plus">
    <description xml:space="preserve">The function of the Range Sensor Service is to provide 
		information from proximity sensors. This service will output the location of various 
		Data Points with a certain measure of accuracy. A given Range Sensor service may be 
		comprised of one to many actual physical sensors or technologies. Each sub-sensor 
		can be assigned (by the developer) a unique Sensor ID. When appropriate, the 
		reserved Sensor ID of 0 may be used to refer to all sensors attached to a given 
		Range Sensor Service.
		The Data Points are measured in the sensor’s native coordinate system and are 
		expressed in terms of range, bearing and inclination. Range is the distance, in 
		meters, along the line from the origin of the sensor’s native coordinate system 
		(sensor’s origin) to the specified point. Bearing is the angle, in radians, that 
		the line from the sensor’s origin to the specified point makes about the sensor’s 
		z-axis in the right handed sense (Figure 2). Inclination is the the angle, in 
		radians, that the line from the sensor origin to the specified point makes about 
		the sensor’s y-axis in the right handed sense (Figure 2). 
		Each data point has an optional ID parameter. This parameter is provided for 
		those sensor technologies which may assign and/or track entities based on unique 
		ID values; however, such tracking capabilities are not required for a compliant 
		Range Sensor Service. The behavior of the data point ID is not specified, i.e. 
		IDs may repeat in a given report and IDs may persist from one report to another. 
		No semantic value should be placed on the ID values in a generalized way. Data 
		Point ID behavior should be derived from the underlying sensor or algorithm 
		technology and is mearly provided to be used in those situations where mutiple 
		parties can agree upon the behavior and semantics of the ID values.
		Data from the range sensor can be reported in both a compressed and uncompressed 
		format, different query and report messages are provided for each exchange and 
		the kind of data compression supported by the service is reported in the 
		Report Range Sensor Capabilities message. Requests for unsupported data 
		compression algorithms will result in the generation of a Report Sensor Error 
		message indicating an unsupported compression request.
		The range sensor can express the bearing, inclination and range terms with respect 
		to either its native coordinate system or the vehicle coordinate system if coordinate 
		transforms are supported. The Query Sensor Geometric Properties message can be 
		used to determine the geometric relationship between the sensor and the vehicle 
		coordinate system. Three possible coordinate responses are possible: (a) 
		the service does not know the sensor’s position, (b) the sensor coordinate 
		system is fixed with respect to the vehicle and (c) the sensor is attached 
		to some manipulator. These cases are supported by the Report Sensor Geometric 
		Properties message and are described therein.</description>
    <assumptions xml:space="preserve">Messages may be delayed, lost or reordered.</assumptions>
    <references>
        <inherits_from name="accessControl" id="urn:jaus:jss:core:AccessControl" version="1.1"/>
    </references>
    <message_set>
        <input_set>
            <message_def name="SetRangeSensorConfiguration" message_id="0802" is_command="true">
                <description xml:space="preserve">This message is used to set the range sensors’ current configuration. Configuration is based off of each range sensor’s capabilities as described in the Report Range Sensor Capabilities message. This message shall cause the receiving service to reply to the sender with a Confirm Range Sensor Configuration message. If the configuration specified is invalid for a given sensor ID, the confirm message shall contain an Range Sensor Error Record for the given Sensor ID however other, valid, configurations specified shall be set (if they exist).</description>
                <header name="AppHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" interpretation="A two byte field to hold the message ID of a message" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body">
                    <sequence name="RangeSensorConfigurationSequence" optional="false">
                        <record name="RequestIdRec" optional="false">
                            <fixed_field name="RequestID" optional="false" field_type="unsigned byte" field_units="one"/>
                        </record>
                        <list name="RangeSensorConfigurationList" optional="false">
                            <count_field min_count="0" max_count="65535" field_type_unsigned="unsigned short integer"/>
                            <record name="RangeSensorConfigurationRec" optional="false">
                                <presence_vector field_type_unsigned="unsigned byte"/>
                                <fixed_field name="SensorID" optional="false" interpretation="ID of the sensor. Zero (0) is not a valid ID in this message." field_type="unsigned short integer" field_units="one">
                                    <value_set offset_to_lower_limit="false">
                                        <value_range lower_limit="1" lower_limit_type="inclusive" upper_limit="65535" upper_limit_type="inclusive"/>
                                    </value_set>
                                </fixed_field>
                                <fixed_field name="HorizontalFieldOfViewStartAngle" optional="true" field_type="unsigned integer" field_units="radian">
                                    <scale_range real_lower_limit="-3.141592653589793" real_upper_limit="3.141592653589793" integer_function="round"/>
                                </fixed_field>
                                <fixed_field name="HorizontalFieldOfViewStopAngle" optional="true" field_type="unsigned integer" field_units="radian">
                                    <scale_range real_lower_limit="-3.141592653589793" real_upper_limit="3.141592653589793" integer_function="round"/>
                                </fixed_field>
                                <fixed_field name="VerticalFieldOfViewStartAngle" optional="true" field_type="unsigned integer" field_units="radian">
                                    <scale_range real_lower_limit="-3.141592653589793" real_upper_limit="3.141592653589793" integer_function="round"/>
                                </fixed_field>
                                <fixed_field name="VerticalFieldOfViewStopAngle" optional="true" field_type="unsigned integer" field_units="radian">
                                    <scale_range real_lower_limit="-3.141592653589793" real_upper_limit="3.141592653589793" integer_function="round"/>
                                </fixed_field>
                                <fixed_field name="UpdateRate" optional="true" field_type="unsigned short integer" field_units="hertz">
                                    <scale_range real_lower_limit="0" real_upper_limit="1000" integer_function="round"/>
                                </fixed_field>
                                <fixed_field name="MinimumRange" optional="true" field_type="unsigned integer" field_units="meter">
                                    <scale_range real_lower_limit="0" real_upper_limit="1000000.0" integer_function="round"/>
                                </fixed_field>
                                <fixed_field name="MaximumRange" optional="true" field_type="unsigned integer" field_units="meter">
                                    <scale_range real_lower_limit="0" real_upper_limit="1000000.0" integer_function="round"/>
                                </fixed_field>
                                <fixed_field name="SensorState" optional="true" field_type="unsigned byte" field_units="one">
                                    <value_set offset_to_lower_limit="false">
                                        <value_enum enum_index="0" enum_const="Active"/>
                                        <value_enum enum_index="1" enum_const="Standby"/>
                                        <value_enum enum_index="2" enum_const="Off"/>
                                    </value_set>
                                </fixed_field>
                            </record>
                        </list>
                    </sequence>
                </body>
                <footer name="Footer"/>
            </message_def>
            <message_def name="QuerySensorGeometricProperties" message_id="2805" is_command="false">
                <description xml:space="preserve">This message shall cause the 
			receiving component to reply to the requestor with a Report 
			Sensor Geometric Properties message.</description>
                <header name="AppHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" interpretation="A two byte field to hold the message ID of a message" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body">
                    <list name="SensorIdList" optional="false">
                        <count_field min_count="0" max_count="65535" field_type_unsigned="unsigned short integer"/>
                        <record name="SensorIDQueryRec" optional="false">
                            <fixed_field name="SensorID" optional="false" interpretation="ID of the sensor being queried. Zero (0) is used to query all sensors associated with this service." field_type="unsigned short integer" field_units="one">
                                <value_set offset_to_lower_limit="false">
                                    <value_enum enum_index="0" enum_const="AllSensors"/>
                                    <value_range lower_limit="1" lower_limit_type="inclusive" upper_limit="65535" upper_limit_type="inclusive" interpretation="Specific ID to be queried"/>
                                </value_set>
                            </fixed_field>
                        </record>
                    </list>
                </body>
                <footer name="Footer"/>
            </message_def>
            <message_def name="QueryRangeSensorCompressedData" message_id="2804" is_command="false">
                <description xml:space="preserve">This message shall cause the 
			receiving service to reply to the requestor with a Report Range 
			Sensor Compressed Data message. A logical AND shall be 
			performed on the requested presence vector and that representing 
			the available fields from the responder. The resulting message 
			shall contain the fields indicated by the result of this logical 
			AND operation. The third field specifies which coordinate system 
			the data should be reported in, either the sensor’s native 
			coordinate system or, if supported, a coordinate system specified 
			by a Set Specified Sensor Coordinate System message. The fourth 
			field specifies the data compression algorithm. Three compression 
			algorithms are supported: DEFLATE, bzip2 and LZMA.</description>
                <header name="AppHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" interpretation="A two byte field to hold the message ID of a message" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body">
                    <list name="QueryRangeSensorCompressedDataList" optional="false">
                        <count_field min_count="0" max_count="65535" field_type_unsigned="unsigned short integer"/>
                        <record name="QueryRangeSensorCompressedDataRec" optional="false">
                            <fixed_field name="SensorID" optional="false" interpretation="ID of the sensor being queried. Zero (0) is used to query all sensors associated with this service." field_type="unsigned short integer" field_units="one">
                                <value_set offset_to_lower_limit="false">
                                    <value_enum enum_index="0" enum_const="AllSensors"/>
                                    <value_range lower_limit="1" lower_limit_type="inclusive" upper_limit="65535" upper_limit_type="inclusive" interpretation="Specific ID to be queried"/>
                                </value_set>
                            </fixed_field>
                            <fixed_field name="ReportCoordinateSystem" optional="false" field_type="unsigned byte" field_units="one">
                                <value_set offset_to_lower_limit="false">
                                    <value_enum enum_index="0" enum_const="Native Coordinate System"/>
                                    <value_enum enum_index="1" enum_const="Vehicle Coordinate System"/>
                                </value_set>
                            </fixed_field>
                            <fixed_field name="DataCompression" optional="false" field_type="unsigned byte" field_units="one">
                                <value_set offset_to_lower_limit="false">
                                    <value_enum enum_index="0" enum_const="None"/>
                                    <value_enum enum_index="1" enum_const="DEFLATE"/>
                                    <value_enum enum_index="2" enum_const="bzip2"/>
                                    <value_enum enum_index="3" enum_const="LZMA "/>
                                </value_set>
                            </fixed_field>
                            <fixed_field name="QueryPresenceVector" optional="false" field_type="unsigned short integer" field_units="one"/>
                        </record>
                    </list>
                </body>
                <footer name="Footer"/>
            </message_def>
            <message_def name="QueryRangeSensorData" message_id="2803" is_command="false">
                <description xml:space="preserve">This message shall cause the 
			receiving service to reply to the requestor with a Report 
			Range Sensor Data message. A logical AND shall be performed 
			on the requested presence vector and that representing the 
			available fields from the responder. The resulting message 
			shall contain the fields indicated by the result of this logical 
			AND operation. The second field specifies which coordinate 
			system the data should be reported in, either the sensor’s 
			native coordinate system or, if supported, a coordinate system 
			specified by a Set Specified Sensor Coordinate System message.</description>
                <header name="AppHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" interpretation="A two byte field to hold the message ID of a message" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body">
                    <list name="QueryRangeSensorDataList" optional="false">
                        <count_field min_count="0" max_count="65535" field_type_unsigned="unsigned short integer"/>
                        <record name="QueryRangeSensorDataRec" optional="false">
                            <fixed_field name="SensorID" optional="false" interpretation="ID of the sensor being queried. Zero (0) is used to query all sensors associated with this service." field_type="unsigned short integer" field_units="one">
                                <value_set offset_to_lower_limit="false">
                                    <value_enum enum_index="0" enum_const="AllSensors"/>
                                    <value_range lower_limit="1" lower_limit_type="inclusive" upper_limit="65535" upper_limit_type="inclusive" interpretation="Specific ID to be queried"/>
                                </value_set>
                            </fixed_field>
                            <fixed_field name="ReportCoordinateSystem" optional="false" field_type="unsigned byte" field_units="one">
                                <value_set offset_to_lower_limit="false">
                                    <value_enum enum_index="0" enum_const="Native Coordinate System"/>
                                    <value_enum enum_index="1" enum_const="Vehicle Coordinate System"/>
                                </value_set>
                            </fixed_field>
                            <fixed_field name="QueryPresenceVector" optional="false" field_type="unsigned short integer" field_units="one"/>
                        </record>
                    </list>
                </body>
                <footer name="Footer"/>
            </message_def>
            <message_def name="QueryRangeSensorCapabilities" message_id="2801" is_command="false">
                <description xml:space="preserve">This message shall cause the 
			receiving service to reply to the requestor with a Report 
			Range Sensor Capabilities message. A logical AND shall be 
			performed on the requested presence vector and that 
			representing the available fields from the responder. 
			The resulting message shall contain the fields indicated 
			by the result of this logical AND operation.</description>
                <header name="AppHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" interpretation="A two byte field to hold the message ID of a message" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body">
                    <list name="RangeSensorCapabilitiesList" optional="false">
                        <count_field min_count="0" max_count="65535" field_type_unsigned="unsigned short integer"/>
                        <record name="QueryRangeSensorCapabilitiesRec" optional="false">
                            <fixed_field name="SensorID" optional="false" interpretation="ID of the sensor being queried. Zero (0) is used to query all sensors associated with this service." field_type="unsigned short integer" field_units="one">
                                <value_set offset_to_lower_limit="false">
                                    <value_enum enum_index="0" enum_const="AllSensors"/>
                                    <value_range lower_limit="1" lower_limit_type="inclusive" upper_limit="65535" upper_limit_type="inclusive" interpretation="Specific ID to be queried"/>
                                </value_set>
                            </fixed_field>
                            <fixed_field name="QueryPresenceVector" optional="false" field_type="unsigned short integer" field_units="one"/>
                        </record>
                    </list>
                </body>
                <footer name="Footer"/>
            </message_def>
            <message_def name="QueryRangeSensorConfiguration" message_id="2802" is_command="false">
                <description xml:space="preserve">This message shall cause the 
			receiving service to reply to the requestor with a Report 
			Range Sensor Configuration message. A logical AND shall be 
			performed on the requested presence vector and that representing 
			the available fields from the responder. The resulting message 
			shall contain the fields indicated by the result of this logical 
			AND operation.</description>
                <header name="AppHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" interpretation="A two byte field to hold the message ID of a message" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body">
                    <list name="RangeSensorConfigurationList" optional="false">
                        <count_field min_count="0" max_count="65535" field_type_unsigned="unsigned short integer"/>
                        <record name="QueryRangeSensorConfigurationRec" optional="false">
                            <fixed_field name="SensorID" optional="false" interpretation="ID of the sensor being queried. Zero (0) is used to query all sensors associated with this service." field_type="unsigned short integer" field_units="one">
                                <value_set offset_to_lower_limit="false">
                                    <value_enum enum_index="0" enum_const="AllSensors"/>
                                    <value_range lower_limit="1" lower_limit_type="inclusive" upper_limit="65535" upper_limit_type="inclusive" interpretation="Specific ID to be queried"/>
                                </value_set>
                            </fixed_field>
                            <fixed_field name="QueryPresenceVector" optional="false" field_type="unsigned short integer" field_units="one"/>
                        </record>
                    </list>
                </body>
                <footer name="Footer"/>
            </message_def>
        </input_set>
        <output_set>
            <message_def name="ConfirmSensorConfiguration" message_id="0801" is_command="false">
                <description xml:space="preserve">This message is used to notify a client component that the configuration has been received with the values specified in the corresponding set message with Request ID matching the value of field 1 of this message. If the specified configuration request is deemed valid, the SensorIdRec is returned with the matching SensorID (or illuminatorID) of the 
			sensor (or illuminator) for which the configuration was successfully 
			set. If the requested configuration is invalid, one of the ErrorRec 
			types shall be returned (depending on the source message) with 
			an error code and description of the configuration setting which 
			was deemed invalid.</description>
                <header name="AppHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" interpretation="A two byte field to hold the message ID of a message" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body">
                    <sequence name="ConfirmSensorConfigurationSequence" optional="false">
                        <record name="RequestIdRec" optional="false">
                            <fixed_field name="RequestID" optional="false" field_type="unsigned byte" field_units="one"/>
                        </record>
                        <list name="ConfirmSensorList" optional="false">
                            <count_field min_count="0" max_count="65535" field_type_unsigned="unsigned short integer"/>
                            <variant name="ConfirmSensorConfigurationVariant" optional="false">
                                <vtag_field min_count="0" max_count="9" field_type_unsigned="unsigned byte"/>
                                <record name="SensorIdRec" optional="false">
                                    <fixed_field name="SensorID" optional="false" interpretation="ID of the sensor. Zero (0) is not a valid ID in this message." field_type="unsigned short integer" field_units="one">
                                        <value_set offset_to_lower_limit="false">
                                            <value_range lower_limit="1" lower_limit_type="inclusive" upper_limit="65535" upper_limit_type="inclusive"/>
                                        </value_set>
                                    </fixed_field>
                                </record>
                                <record name="RangeSensorErrorRec" optional="false">
                                    <fixed_field name="SensorID" optional="false" interpretation="ID of the sensor. Zero (0) is not a valid ID in this message." field_type="unsigned short integer" field_units="one">
                                        <value_set offset_to_lower_limit="false">
                                            <value_range lower_limit="1" lower_limit_type="inclusive" upper_limit="65535" upper_limit_type="inclusive"/>
                                        </value_set>
                                    </fixed_field>
                                    <fixed_field name="RangeSensorErrorCode" optional="false" field_type="unsigned byte" field_units="one">
                                        <value_set offset_to_lower_limit="false">
                                            <value_enum enum_index="0" enum_const="Unknown Sensor ID"/>
                                            <value_enum enum_index="1" enum_const="Invalid Horizontal Field of View"/>
                                            <value_enum enum_index="2" enum_const="Invalid Vertical Field of View"/>
                                            <value_enum enum_index="3" enum_const="Invalid Update Rate"/>
                                            <value_enum enum_index="4" enum_const="Invalid Sensor Range"/>
                                            <value_enum enum_index="5" enum_const="Invalid Sensor State"/>
                                            <value_enum enum_index="6" enum_const="Multiple Invalid Parameters"/>
                                            <value_enum enum_index="255" enum_const="Unknown Error / Fault"/>
                                        </value_set>
                                    </fixed_field>
                                    <variable_length_string name="ErrorMessage" optional="false">
                                        <count_field min_count="0" max_count="255" field_type_unsigned="unsigned byte"/>
                                    </variable_length_string>
                                </record>
                                <record name="VisualSensorErrorRec" optional="false">
                                    <fixed_field name="SensorID" optional="false" interpretation="ID of the sensor. Zero (0) is not a valid ID in this message." field_type="unsigned short integer" field_units="one">
                                        <value_set offset_to_lower_limit="false">
                                            <value_range lower_limit="1" lower_limit_type="inclusive" upper_limit="65535" upper_limit_type="inclusive"/>
                                        </value_set>
                                    </fixed_field>
                                    <fixed_field name="VisualSensorErrorCode" optional="false" field_type="unsigned byte" field_units="one">
                                        <value_set offset_to_lower_limit="false">
                                            <value_enum enum_index="0" enum_const="Unknown Sensor ID"/>
                                            <value_enum enum_index="1" enum_const="Invalid Sensor State"/>
                                            <value_enum enum_index="2" enum_const="Invalid Zoom Mode"/>
                                            <value_enum enum_index="3" enum_const="Invalid Zoom Value"/>
                                            <value_enum enum_index="4" enum_const="Invalid Focus Mode"/>
                                            <value_enum enum_index="5" enum_const="Invalid Focus Value"/>
                                            <value_enum enum_index="6" enum_const="Invalid White Balance"/>
                                            <value_enum enum_index="7" enum_const="Invalid Imaging Mode"/>
                                            <value_enum enum_index="8" enum_const="Invalid Exposure Mode"/>
                                            <value_enum enum_index="9" enum_const="Invalid Metering Mode"/>
                                            <value_enum enum_index="10" enum_const="Invalid Shutter Speed"/>
                                            <value_enum enum_index="11" enum_const="Invalid Aperture Value"/>
                                            <value_enum enum_index="12" enum_const="Invalid Light Sensitivity"/>
                                            <value_enum enum_index="13" enum_const="Invalid Image Stabilization"/>
                                            <value_enum enum_index="14" enum_const="Invalid Horizontal FOV"/>
                                            <value_enum enum_index="15" enum_const="Invalid Vertical FOV"/>
                                            <value_enum enum_index="16" enum_const="Multiple Invalid Parameters"/>
                                            <value_enum enum_index="255" enum_const="Unknown Error / Fault"/>
                                        </value_set>
                                    </fixed_field>
                                    <variable_length_string name="ErrorMessage" optional="false">
                                        <count_field min_count="0" max_count="255" field_type_unsigned="unsigned byte"/>
                                    </variable_length_string>
                                </record>
                                <record name="DigitalVideoSensorErrorRec" optional="false">
                                    <fixed_field name="SensorID" optional="false" interpretation="ID of the sensor. Zero (0) is not a valid ID in this message." field_type="unsigned short integer" field_units="one">
                                        <value_set offset_to_lower_limit="false">
                                            <value_range lower_limit="1" lower_limit_type="inclusive" upper_limit="65535" upper_limit_type="inclusive"/>
                                        </value_set>
                                    </fixed_field>
                                    <fixed_field name="DigitalVideoErrorCode" optional="false" field_type="unsigned byte" field_units="one">
                                        <value_set offset_to_lower_limit="false">
                                            <value_enum enum_index="0" enum_const="Unknown Sensor ID"/>
                                            <value_enum enum_index="1" enum_const="Invalid Minimum Bit Rate"/>
                                            <value_enum enum_index="2" enum_const="Invalid Maximum Bit Rate"/>
                                            <value_enum enum_index="3" enum_const="Requested Frame Rate Too Low"/>
                                            <value_enum enum_index="4" enum_const="Requested Frame Rate Too High"/>
                                            <value_enum enum_index="5" enum_const="Invalid Frame Size"/>
                                            <value_enum enum_index="6" enum_const="Invalid Format"/>
                                            <value_enum enum_index="7" enum_const="Multiple Invalid Parameters"/>
                                            <value_enum enum_index="255" enum_const="Unknown Error / Fault"/>
                                        </value_set>
                                    </fixed_field>
                                    <variable_length_string name="ErrorMessage" optional="false">
                                        <count_field min_count="0" max_count="255" field_type_unsigned="unsigned byte"/>
                                    </variable_length_string>
                                </record>
                                <record name="AnalogVideoSensorErrorRec" optional="false">
                                    <fixed_field name="SensorID" optional="false" interpretation="ID of the sensor. Zero (0) is not a valid ID in this message." field_type="unsigned short integer" field_units="one">
                                        <value_set offset_to_lower_limit="false">
                                            <value_range lower_limit="1" lower_limit_type="inclusive" upper_limit="65535" upper_limit_type="inclusive"/>
                                        </value_set>
                                    </fixed_field>
                                    <fixed_field name="AnalogVideoErrorCode" optional="false" field_type="unsigned byte" field_units="one">
                                        <value_set offset_to_lower_limit="false">
                                            <value_enum enum_index="0" enum_const="Unknown Sensor ID"/>
                                            <value_enum enum_index="1" enum_const="Invalid Format"/>
                                            <value_enum enum_index="255" enum_const="Unknown Error / Fault"/>
                                        </value_set>
                                    </fixed_field>
                                    <variable_length_string name="ErrorMessage" optional="false">
                                        <count_field min_count="0" max_count="255" field_type_unsigned="unsigned byte"/>
                                    </variable_length_string>
                                </record>
                                <record name="StillImageSensorErrorRec" optional="false">
                                    <fixed_field name="SensorID" optional="false" interpretation="ID of the sensor. Zero (0) is not a valid ID in this message." field_type="unsigned short integer" field_units="one">
                                        <value_set offset_to_lower_limit="false">
                                            <value_range lower_limit="1" lower_limit_type="inclusive" upper_limit="65535" upper_limit_type="inclusive"/>
                                        </value_set>
                                    </fixed_field>
                                    <fixed_field name="StillImageErrorCode" optional="false" field_type="unsigned byte" field_units="one">
                                        <value_set offset_to_lower_limit="false">
                                            <value_enum enum_index="0" enum_const="Unknown Sensor ID"/>
                                            <value_enum enum_index="1" enum_const="Invalid Frame Size"/>
                                            <value_enum enum_index="2" enum_const="Invalid Format"/>
                                            <value_enum enum_index="3" enum_const="Multiple Invalid Parameters"/>
                                            <value_enum enum_index="255" enum_const="Unknown Error / Fault"/>
                                        </value_set>
                                    </fixed_field>
                                    <variable_length_string name="ErrorMessage" optional="false">
                                        <count_field min_count="0" max_count="255" field_type_unsigned="unsigned byte"/>
                                    </variable_length_string>
                                </record>
                                <record name="H264VideoEncodingErrorRec" optional="false">
                                    <fixed_field name="SensorID" optional="false" interpretation="ID of the sensor. Zero (0) is not a valid ID in this message." field_type="unsigned short integer" field_units="one">
                                        <value_set offset_to_lower_limit="false">
                                            <value_range lower_limit="1" lower_limit_type="inclusive" upper_limit="65535" upper_limit_type="inclusive"/>
                                        </value_set>
                                    </fixed_field>
                                    <fixed_field name="H264VideoEncodingErrorCode" optional="false" field_type="unsigned byte" field_units="one">
                                        <value_set offset_to_lower_limit="false">
                                            <value_enum enum_index="0" enum_const="Unknown Sensor ID"/>
                                            <value_enum enum_index="1" enum_const="Invalid Profile"/>
                                            <value_enum enum_index="2" enum_const="Invalid Preset"/>
                                            <value_enum enum_index="3" enum_const="Invalid GroupOfPictures"/>
                                            <value_enum enum_index="4" enum_const="Invalid GDR"/>
                                            <value_enum enum_index="5" enum_const="Invalid RegionOfInterest"/>
                                            <value_enum enum_index="6" enum_const="Invalid IntraMacroRefresh"/>
                                            <value_enum enum_index="255" enum_const="Unknown Error / Fault"/>
                                        </value_set>
                                    </fixed_field>
                                    <variable_length_string name="ErrorMessage" optional="false">
                                        <count_field min_count="0" max_count="255" field_type_unsigned="unsigned byte"/>
                                    </variable_length_string>
                                </record>
                                <record name="DigitalAudioSensorErrorRec" optional="false">
                                    <fixed_field name="SensorID" optional="false" interpretation="ID of the sensor. Zero (0) is not a valid ID in this message." field_type="unsigned short integer" field_units="one">
                                        <value_set offset_to_lower_limit="false">
                                            <value_range lower_limit="1" lower_limit_type="inclusive" upper_limit="65535" upper_limit_type="inclusive"/>
                                        </value_set>
                                    </fixed_field>
                                    <fixed_field name="DigitalAudioSensorErrorCode" optional="false" field_type="unsigned byte" field_units="one">
                                        <value_set offset_to_lower_limit="false">
                                            <value_enum enum_index="0" enum_const="Unknown Sensor ID"/>
                                            <value_enum enum_index="1" enum_const="Invalid BitRate"/>
                                            <value_enum enum_index="2" enum_const="Invalid Format"/>
                                            <value_enum enum_index="3" enum_const="Invalid SampleRate"/>
                                            <value_enum enum_index="4" enum_const="Invalid BitDepth"/>
                                            <value_enum enum_index="5" enum_const="Invalid EncodingQuality"/>
                                            <value_enum enum_index="255" enum_const="Unknown Error / Fault"/>
                                        </value_set>
                                    </fixed_field>
                                    <variable_length_string name="ErrorMessage" optional="false">
                                        <count_field min_count="0" max_count="255" field_type_unsigned="unsigned byte"/>
                                    </variable_length_string>
                                </record>
                                <record name="DigitalAudioOutputErrorRec" optional="false">
                                    <fixed_field name="SensorID" optional="false" interpretation="ID of the sensor. Zero (0) is not a valid ID in this message." field_type="unsigned short integer" field_units="one">
                                        <value_set offset_to_lower_limit="false">
                                            <value_range lower_limit="1" lower_limit_type="inclusive" upper_limit="65535" upper_limit_type="inclusive"/>
                                        </value_set>
                                    </fixed_field>
                                    <fixed_field name="DigitalAudioOutputErrorCode" optional="false" field_type="unsigned byte" field_units="one">
                                        <value_set offset_to_lower_limit="false">
                                            <value_enum enum_index="0" enum_const="Unknown Sensor ID"/>
                                            <value_enum enum_index="1" enum_const="Stream Not Found"/>
                                            <value_enum enum_index="2" enum_const="Stream Not Supported"/>
                                            <value_enum enum_index="255" enum_const="Unknown Error / Fault"/>
                                        </value_set>
                                    </fixed_field>
                                    <variable_length_string name="ErrorMessage" optional="false">
                                        <count_field min_count="0" max_count="255" field_type_unsigned="unsigned byte"/>
                                    </variable_length_string>
                                </record>
                                <record name="VideoIlluminatorErrorRec" optional="false">
                                    <fixed_field name="IlluminatorID" optional="false" field_type="unsigned short integer" field_units="one"/>
                                    <fixed_field name="VideoIlluminatorErrorRecCode" optional="false" field_type="unsigned byte" field_units="one">
                                        <value_set offset_to_lower_limit="false">
                                            <value_enum enum_index="0" enum_const="Unknown Sensor ID"/>
                                            <value_enum enum_index="1" enum_const="Unsupported Mode"/>
                                            <value_enum enum_index="2" enum_const="Unsupported Beam Width"/>
                                            <value_enum enum_index="3" enum_const="Unsupported Beam Height"/>
                                            <value_enum enum_index="255" enum_const="Unknown Error / Fault"/>
                                        </value_set>
                                    </fixed_field>
                                    <variable_length_string name="ErrorMessage" optional="false">
                                        <count_field min_count="0" max_count="255" field_type_unsigned="unsigned byte"/>
                                    </variable_length_string>
                                </record>
                            </variant>
                        </list>
                    </sequence>
                </body>
                <footer name="Footer"/>
            </message_def>
            <message_def name="ReportRangeSensorCapabilities" message_id="4801" is_command="false">
                <description xml:space="preserve">This message is used to report the range sensors’ capabilities upon receipt of a Query Range Sensor Capabilities message. Capabilities include both static sensor properties and valid values and ranges for properties which can be modified by the Set Range Sensor Capabilities Message.</description>
                <header name="AppHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" interpretation="A two byte field to hold the message ID of a message" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body">
                    <list name="RangeSensorCapabilitiesList" optional="false">
                        <count_field min_count="0" max_count="65535" field_type_unsigned="unsigned short integer"/>
                        <record name="RangeSensorCapabilitiesRec" optional="false">
                            <presence_vector field_type_unsigned="unsigned short integer"/>
                            <fixed_field name="SensorID" optional="false" interpretation="ID of the sensor. Zero (0) is not a valid ID in this message." field_type="unsigned short integer" field_units="one">
                                <value_set offset_to_lower_limit="false">
                                    <value_range lower_limit="1" lower_limit_type="inclusive" upper_limit="65535" upper_limit_type="inclusive"/>
                                </value_set>
                            </fixed_field>
                            <variable_length_string name="SensorName" optional="false">
                                <count_field min_count="0" max_count="255" field_type_unsigned="unsigned byte"/>
                            </variable_length_string>
                            <bit_field name="SupportedStates" optional="true" field_type_unsigned="unsigned byte">
                                <sub_field name="Active">
                                    <bit_range from_index="0" to_index="0"/>
                                    <value_set offset_to_lower_limit="false">
                                        <value_enum enum_index="0" enum_const="Unsupported"/>
                                        <value_enum enum_index="1" enum_const="Supported"/>
                                    </value_set>
                                </sub_field>
                                <sub_field name="Standby">
                                    <bit_range from_index="1" to_index="1"/>
                                    <value_set offset_to_lower_limit="false">
                                        <value_enum enum_index="0" enum_const="Unsupported"/>
                                        <value_enum enum_index="1" enum_const="Supported"/>
                                    </value_set>
                                </sub_field>
                                <sub_field name="Off">
                                    <bit_range from_index="2" to_index="2"/>
                                    <value_set offset_to_lower_limit="false">
                                        <value_enum enum_index="0" enum_const="Unsupported"/>
                                        <value_enum enum_index="1" enum_const="Supported"/>
                                    </value_set>
                                </sub_field>
                            </bit_field>
                            <fixed_field name="MinimumHorizontalFieldOfViewStartAngle" optional="true" field_type="unsigned integer" field_units="radian">
                                <scale_range real_lower_limit="-3.141592653589793" real_upper_limit="3.141592653589793" integer_function="round"/>
                            </fixed_field>
                            <fixed_field name="MaximumHorizontalFieldOfViewStopAngle" optional="true" field_type="unsigned integer" field_units="radian">
                                <scale_range real_lower_limit="-3.141592653589793" real_upper_limit="3.141592653589793" integer_function="round"/>
                            </fixed_field>
                            <fixed_field name="MinimumVerticalFieldOfViewStartAngle" optional="true" field_type="unsigned integer" field_units="radian">
                                <scale_range real_lower_limit="-3.141592653589793" real_upper_limit="3.141592653589793" integer_function="round"/>
                            </fixed_field>
                            <fixed_field name="MaximumVerticalFieldOfViewStopAngle" optional="true" field_type="unsigned integer" field_units="radian">
                                <scale_range real_lower_limit="-3.141592653589793" real_upper_limit="3.141592653589793" integer_function="round"/>
                            </fixed_field>
                            <fixed_field name="MiniumumUpdateRate" optional="true" field_type="unsigned short integer" field_units="hertz">
                                <scale_range real_lower_limit="0" real_upper_limit="1000" integer_function="round"/>
                            </fixed_field>
                            <fixed_field name="MaximumUpdateRate" optional="true" field_type="unsigned short integer" field_units="hertz">
                                <scale_range real_lower_limit="0" real_upper_limit="1000" integer_function="round"/>
                            </fixed_field>
                            <fixed_field name="MinimumRange" optional="true" field_type="unsigned integer" field_units="meter">
                                <scale_range real_lower_limit="0" real_upper_limit="1000000.0" integer_function="round"/>
                            </fixed_field>
                            <fixed_field name="MaximumRange" optional="true" field_type="unsigned integer" field_units="meter">
                                <scale_range real_lower_limit="0" real_upper_limit="1000000.0" integer_function="round"/>
                            </fixed_field>
                            <bit_field name="SupportedCompression" optional="true" field_type_unsigned="unsigned byte">
                                <sub_field name="NoCompression">
                                    <bit_range from_index="0" to_index="0"/>
                                    <value_set offset_to_lower_limit="false">
                                        <value_enum enum_index="0" enum_const="Unsupported"/>
                                        <value_enum enum_index="1" enum_const="Supported"/>
                                    </value_set>
                                </sub_field>
                                <sub_field name="DEFLATE">
                                    <bit_range from_index="1" to_index="1"/>
                                    <value_set offset_to_lower_limit="false">
                                        <value_enum enum_index="0" enum_const="Unsupported"/>
                                        <value_enum enum_index="1" enum_const="Supported"/>
                                    </value_set>
                                </sub_field>
                                <sub_field name="bzip2">
                                    <bit_range from_index="2" to_index="2"/>
                                    <value_set offset_to_lower_limit="false">
                                        <value_enum enum_index="0" enum_const="Unsupported"/>
                                        <value_enum enum_index="1" enum_const="Supported"/>
                                    </value_set>
                                </sub_field>
                                <sub_field name="LZMA">
                                    <bit_range from_index="3" to_index="3"/>
                                    <value_set offset_to_lower_limit="false">
                                        <value_enum enum_index="0" enum_const="Unsupported"/>
                                        <value_enum enum_index="1" enum_const="Supported"/>
                                    </value_set>
                                </sub_field>
                            </bit_field>
                            <fixed_field name="CoordinateTransformationSupported" optional="true" field_type="unsigned byte" field_units="one">
                                <value_set offset_to_lower_limit="false">
                                    <value_enum enum_index="0" enum_const="False"/>
                                    <value_enum enum_index="1" enum_const="True"/>
                                </value_set>
                            </fixed_field>
                        </record>
                    </list>
                </body>
                <footer name="Footer"/>
            </message_def>
            <message_def name="ReportRangeSensorConfiguration" message_id="4802" is_command="false">
                <description xml:space="preserve">This message is sent in response to a Query Range Sensor Configuration message. It is populated with the current sensor configuration (per sensor ID) as defined in the table below.</description>
                <header name="AppHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" interpretation="A two byte field to hold the message ID of a message" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body">
                    <list name="RangeSensorConfigurationList" optional="false">
                        <count_field min_count="0" max_count="65535" field_type_unsigned="unsigned short integer"/>
                        <record name="RangeSensorConfigurationRec" optional="false">
                            <presence_vector field_type_unsigned="unsigned byte"/>
                            <fixed_field name="SensorID" optional="false" interpretation="ID of the sensor. Zero (0) is not a valid ID in this message." field_type="unsigned short integer" field_units="one">
                                <value_set offset_to_lower_limit="false">
                                    <value_range lower_limit="1" lower_limit_type="inclusive" upper_limit="65535" upper_limit_type="inclusive"/>
                                </value_set>
                            </fixed_field>
                            <fixed_field name="HorizontalFieldOfViewStartAngle" optional="true" field_type="unsigned integer" field_units="radian">
                                <scale_range real_lower_limit="-3.141592653589793" real_upper_limit="3.141592653589793" integer_function="round"/>
                            </fixed_field>
                            <fixed_field name="HorizontalFieldOfViewStopAngle" optional="true" field_type="unsigned integer" field_units="radian">
                                <scale_range real_lower_limit="-3.141592653589793" real_upper_limit="3.141592653589793" integer_function="round"/>
                            </fixed_field>
                            <fixed_field name="VerticalFieldOfViewStartAngle" optional="true" field_type="unsigned integer" field_units="radian">
                                <scale_range real_lower_limit="-3.141592653589793" real_upper_limit="3.141592653589793" integer_function="round"/>
                            </fixed_field>
                            <fixed_field name="VerticalFieldOfViewStopAngle" optional="true" field_type="unsigned integer" field_units="radian">
                                <scale_range real_lower_limit="-3.141592653589793" real_upper_limit="3.141592653589793" integer_function="round"/>
                            </fixed_field>
                            <fixed_field name="UpdateRate" optional="true" field_type="unsigned short integer" field_units="hertz">
                                <scale_range real_lower_limit="0" real_upper_limit="1000" integer_function="round"/>
                            </fixed_field>
                            <fixed_field name="MinimumRange" optional="true" field_type="unsigned integer" field_units="meter">
                                <scale_range real_lower_limit="0" real_upper_limit="1000000.0" integer_function="round"/>
                            </fixed_field>
                            <fixed_field name="MaximumRange" optional="true" field_type="unsigned integer" field_units="meter">
                                <scale_range real_lower_limit="0" real_upper_limit="1000000.0" integer_function="round"/>
                            </fixed_field>
                            <fixed_field name="SensorState" optional="true" field_type="unsigned byte" field_units="one">
                                <value_set offset_to_lower_limit="false">
                                    <value_enum enum_index="0" enum_const="Active"/>
                                    <value_enum enum_index="1" enum_const="Standby"/>
                                    <value_enum enum_index="2" enum_const="Off"/>
                                </value_set>
                            </fixed_field>
                        </record>
                    </list>
                </body>
                <footer name="Footer"/>
            </message_def>
            <message_def name="ReportRangeSensorData" message_id="4803" is_command="false">
                <description xml:space="preserve">This message is sent by a receiving component upon receipt of a Query Range Sensor Data message. This message reports a list of detected data points for a given time. The RangeSensorDataSeq is used to report the data from a given sensor along with meta data such as sensor ID and timestamp. The timestamp defines the time at which the collected data was valid. Data points are defined by range, bearing and inclination with respect to either the native coordinate system or the vehicle coordinate system. Data is only reported for sensors which are in the active state. If data is queried for a sensor which is not active, the RangeSensorDataErrorRec is returned for that sensor ID report.</description>
                <header name="AppHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" interpretation="A two byte field to hold the message ID of a message" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body">
                    <list name="RangeSensorDataList" optional="false">
                        <count_field min_count="0" max_count="65535" field_type_unsigned="unsigned short integer"/>
                        <variant name="RangeSensorDataVariant" optional="false">
                            <vtag_field min_count="0" max_count="1" field_type_unsigned="unsigned byte"/>
                            <record name="RangeSensorDataErrorRec" optional="false">
                                <fixed_field name="SensorID" optional="false" interpretation="ID of the sensor. Zero (0) is not a valid ID in this message." field_type="unsigned short integer" field_units="one">
                                    <value_set offset_to_lower_limit="false">
                                        <value_range lower_limit="1" lower_limit_type="inclusive" upper_limit="65535" upper_limit_type="inclusive"/>
                                    </value_set>
                                </fixed_field>
                                <fixed_field name="DataErrorCode" optional="false" field_type="unsigned byte" field_units="one">
                                    <value_set offset_to_lower_limit="false">
                                        <value_enum enum_index="0" enum_const="Sensor is not Active"/>
                                        <value_enum enum_index="1" enum_const="Invalid compression format"/>
                                        <value_enum enum_index="255" enum_const="Unknown Error / Failure"/>
                                    </value_set>
                                </fixed_field>
                                <variable_length_string name="ErrorMessage" optional="false">
                                    <count_field min_count="0" max_count="255" field_type_unsigned="unsigned byte"/>
                                </variable_length_string>
                            </record>
                            <sequence name="RangeSensorDataSeq" optional="false">
                                <record name="RangeSensorDataRec" optional="false">
                                    <fixed_field name="SensorID" optional="false" interpretation="ID of the sensor. Zero (0) is not a valid ID in this message." field_type="unsigned short integer" field_units="one">
                                        <value_set offset_to_lower_limit="false">
                                            <value_range lower_limit="1" lower_limit_type="inclusive" upper_limit="65535" upper_limit_type="inclusive"/>
                                        </value_set>
                                    </fixed_field>
                                    <fixed_field name="ReportCoordinateSystem" optional="false" field_type="unsigned byte" field_units="one">
                                        <value_set offset_to_lower_limit="false">
                                            <value_enum enum_index="0" enum_const="Native Coordinate System"/>
                                            <value_enum enum_index="1" enum_const="Vehicle Coordinate System"/>
                                        </value_set>
                                    </fixed_field>
                                    <bit_field name="TimeStamp" optional="false" field_type_unsigned="unsigned integer">
                                        <sub_field name="Milliseconds">
                                            <bit_range from_index="0" to_index="9"/>
                                            <value_set offset_to_lower_limit="false">
                                                <value_range lower_limit="0" lower_limit_type="inclusive" upper_limit="999" upper_limit_type="inclusive"/>
                                            </value_set>
                                        </sub_field>
                                        <sub_field name="Seconds">
                                            <bit_range from_index="10" to_index="15"/>
                                            <value_set offset_to_lower_limit="false">
                                                <value_range lower_limit="0" lower_limit_type="inclusive" upper_limit="59" upper_limit_type="inclusive"/>
                                            </value_set>
                                        </sub_field>
                                        <sub_field name="Minutes">
                                            <bit_range from_index="16" to_index="21"/>
                                            <value_set offset_to_lower_limit="false">
                                                <value_range lower_limit="0" lower_limit_type="inclusive" upper_limit="59" upper_limit_type="inclusive"/>
                                            </value_set>
                                        </sub_field>
                                        <sub_field name="Hour">
                                            <bit_range from_index="22" to_index="26"/>
                                            <value_set offset_to_lower_limit="false">
                                                <value_range lower_limit="0" lower_limit_type="inclusive" upper_limit="23" upper_limit_type="inclusive"/>
                                            </value_set>
                                        </sub_field>
                                        <sub_field name="Day">
                                            <bit_range from_index="27" to_index="31"/>
                                            <value_set offset_to_lower_limit="false">
                                                <value_range lower_limit="1" lower_limit_type="inclusive" upper_limit="31" upper_limit_type="inclusive"/>
                                            </value_set>
                                        </sub_field>
                                    </bit_field>
                                </record>
                                <list name="RangeSensorDataPointList" optional="false">
                                    <count_field min_count="0" max_count="65535" field_type_unsigned="unsigned short integer"/>
                                    <record name="RangeSensorDataPointRec" optional="false">
                                        <presence_vector field_type_unsigned="unsigned byte"/>
                                        <fixed_field name="PointID" optional="true" field_type="unsigned integer" field_units="one"/>
                                        <fixed_field name="Range" optional="false" field_type="unsigned integer" field_units="meter">
                                            <scale_range real_lower_limit="0" real_upper_limit="1000000.0" integer_function="round"/>
                                        </fixed_field>
                                        <fixed_field name="RangeValidity" optional="true" field_type="unsigned byte" field_units="one">
                                            <value_set offset_to_lower_limit="false">
                                                <value_enum enum_index="0" enum_const="False"/>
                                                <value_enum enum_index="1" enum_const="True"/>
                                            </value_set>
                                        </fixed_field>
                                        <fixed_field name="RangeErrorRMS" optional="true" field_type="unsigned integer" field_units="meter">
                                            <scale_range real_lower_limit="0.0" real_upper_limit="100000.0" integer_function="round"/>
                                        </fixed_field>
                                        <fixed_field name="Bearing" optional="false" field_type="unsigned integer" field_units="radian">
                                            <scale_range real_lower_limit="-3.141592653589793" real_upper_limit="3.141592653589793" integer_function="round"/>
                                        </fixed_field>
                                        <fixed_field name="BearingValidity" optional="true" field_type="unsigned byte" field_units="one">
                                            <value_set offset_to_lower_limit="false">
                                                <value_enum enum_index="0" enum_const="False"/>
                                                <value_enum enum_index="1" enum_const="True"/>
                                            </value_set>
                                        </fixed_field>
                                        <fixed_field name="BearingErrorRMS" optional="true" field_type="unsigned integer" field_units="radian">
                                            <scale_range real_lower_limit="0" real_upper_limit="3.141592653589793" integer_function="round"/>
                                        </fixed_field>
                                        <fixed_field name="Inclination" optional="false" field_type="unsigned integer" field_units="radian">
                                            <scale_range real_lower_limit="-3.141592653589793" real_upper_limit="3.141592653589793" integer_function="round"/>
                                        </fixed_field>
                                        <fixed_field name="InclinationValidity" optional="true" field_type="unsigned byte" field_units="one">
                                            <value_set offset_to_lower_limit="false">
                                                <value_enum enum_index="0" enum_const="False"/>
                                                <value_enum enum_index="1" enum_const="True"/>
                                            </value_set>
                                        </fixed_field>
                                        <fixed_field name="InclinationErrorRMS" optional="true" field_type="unsigned integer" field_units="radian">
                                            <scale_range real_lower_limit="0.0" real_upper_limit="3.141592653589793" integer_function="round"/>
                                        </fixed_field>
                                    </record>
                                </list>
                            </sequence>
                        </variant>
                    </list>
                </body>
                <footer name="Footer"/>
            </message_def>
            <message_def name="ReportRangeSensorCompressedData" message_id="4804" is_command="false">
                <description xml:space="preserve">This message is used to report a list of detected data points for a given time. This message differs from the Report Range Sensor Data message in that the data contained herein has undergone compression by the specified algorithm. The timestamp defines the time at which the collected data was valid. Data points are defined by range, bearing and inclination with respect to either the sensor coordinate system or a specified coordinate system.</description>
                <header name="AppHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" interpretation="A two byte field to hold the message ID of a message" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body">
                    <list name="RangeSensorCompressedDataList" optional="false">
                        <count_field min_count="0" max_count="65535" field_type_unsigned="unsigned short integer"/>
                        <variant name="RangeSensorCompressedDataVariant" optional="false">
                            <vtag_field min_count="0" max_count="1" field_type_unsigned="unsigned byte"/>
                            <record name="RangeSensorDataErrorRec" optional="false">
                                <fixed_field name="SensorID" optional="false" interpretation="ID of the sensor. Zero (0) is not a valid ID in this message." field_type="unsigned short integer" field_units="one">
                                    <value_set offset_to_lower_limit="false">
                                        <value_range lower_limit="1" lower_limit_type="inclusive" upper_limit="65535" upper_limit_type="inclusive"/>
                                    </value_set>
                                </fixed_field>
                                <fixed_field name="DataErrorCode" optional="false" field_type="unsigned byte" field_units="one">
                                    <value_set offset_to_lower_limit="false">
                                        <value_enum enum_index="0" enum_const="Sensor is not Active"/>
                                        <value_enum enum_index="1" enum_const="Invalid compression format"/>
                                        <value_enum enum_index="255" enum_const="Unknown Error / Failure"/>
                                    </value_set>
                                </fixed_field>
                                <variable_length_string name="ErrorMessage" optional="false">
                                    <count_field min_count="0" max_count="255" field_type_unsigned="unsigned byte"/>
                                </variable_length_string>
                            </record>
                            <record name="RangeSensorCompressedDataRec" optional="false">
                                <fixed_field name="SensorID" optional="false" interpretation="ID of the sensor. Zero (0) is not a valid ID in this message." field_type="unsigned short integer" field_units="one">
                                    <value_set offset_to_lower_limit="false">
                                        <value_range lower_limit="1" lower_limit_type="inclusive" upper_limit="65535" upper_limit_type="inclusive"/>
                                    </value_set>
                                </fixed_field>
                                <fixed_field name="ReportCoordinateSystem" optional="false" field_type="unsigned byte" field_units="one">
                                    <value_set offset_to_lower_limit="false">
                                        <value_enum enum_index="0" enum_const="Native Coordinate System"/>
                                        <value_enum enum_index="1" enum_const="Vehicle Coordinate System"/>
                                    </value_set>
                                </fixed_field>
                                <bit_field name="TimeStamp" optional="false" field_type_unsigned="unsigned integer">
                                    <sub_field name="Milliseconds">
                                        <bit_range from_index="0" to_index="9"/>
                                        <value_set offset_to_lower_limit="false">
                                            <value_range lower_limit="0" lower_limit_type="inclusive" upper_limit="999" upper_limit_type="inclusive"/>
                                        </value_set>
                                    </sub_field>
                                    <sub_field name="Seconds">
                                        <bit_range from_index="10" to_index="15"/>
                                        <value_set offset_to_lower_limit="false">
                                            <value_range lower_limit="0" lower_limit_type="inclusive" upper_limit="59" upper_limit_type="inclusive"/>
                                        </value_set>
                                    </sub_field>
                                    <sub_field name="Minutes">
                                        <bit_range from_index="16" to_index="21"/>
                                        <value_set offset_to_lower_limit="false">
                                            <value_range lower_limit="0" lower_limit_type="inclusive" upper_limit="59" upper_limit_type="inclusive"/>
                                        </value_set>
                                    </sub_field>
                                    <sub_field name="Hour">
                                        <bit_range from_index="22" to_index="26"/>
                                        <value_set offset_to_lower_limit="false">
                                            <value_range lower_limit="0" lower_limit_type="inclusive" upper_limit="23" upper_limit_type="inclusive"/>
                                        </value_set>
                                    </sub_field>
                                    <sub_field name="Day">
                                        <bit_range from_index="27" to_index="31"/>
                                        <value_set offset_to_lower_limit="false">
                                            <value_range lower_limit="1" lower_limit_type="inclusive" upper_limit="31" upper_limit_type="inclusive"/>
                                        </value_set>
                                    </sub_field>
                                </bit_field>
                                <fixed_field name="DataCompression" optional="false" field_type="unsigned byte" field_units="one">
                                    <value_set offset_to_lower_limit="false">
                                        <value_enum enum_index="0" enum_const="None"/>
                                        <value_enum enum_index="1" enum_const="DEFLATE"/>
                                        <value_enum enum_index="2" enum_const="bzip2"/>
                                        <value_enum enum_index="3" enum_const="LZMA "/>
                                    </value_set>
                                </fixed_field>
                                <variable_length_field name="CompressedData" optional="false" field_format="RangeSensorDataPointList">
                                    <count_field min_count="0" max_count="2147483647" field_type_unsigned="unsigned integer"/>
                                </variable_length_field>
                            </record>
                        </variant>
                    </list>
                </body>
                <footer name="Footer"/>
            </message_def>
            <message_def name="ReportSensorGeometricProperties" message_id="4805" is_command="false">
                <description xml:space="preserve">This message is used to report information about the geometric properties of a sensor with respect to the vehicle. Three possible use cases are supported: 1.The sensor has no knowledge of its geometric properties. 2.The sensor is rigidly mounted to the vehicle and the position and orientation with respect to the vehicle coordinate system is known. In this case the position and orientation of the sensor is defined by a position vector (x, y, z) and unit quaternion (d; a, b, c) which specifies the axis and angle of rotation used to establish the orientation of the sensor coordinate system with respect to the vehicle coordinate system. 3.The sensor is mounted to a manipulator in which the JAUS ID, joint number and the sensor offset are described. In this case the position and orientation of the sensor is defined by a position vector (x, y, z) and unit quaternion (d; a, b, c) which specifies the axis and angle of rotation used to establish the orientation of the sensor coordinate system with respect to the link coordinate system.</description>
                <header name="AppHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" interpretation="A two byte field to hold the message ID of a message" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body">
                    <list name="GeometricPropertiesList" optional="false">
                        <count_field min_count="0" max_count="65535" field_type_unsigned="unsigned short integer"/>
                        <sequence name="GeometricPropertiesSequence" optional="false">
                            <record name="SensorIdRec" optional="false">
                                <fixed_field name="SensorID" optional="false" interpretation="ID of the sensor. Zero (0) is not a valid ID in this message." field_type="unsigned short integer" field_units="one">
                                    <value_set offset_to_lower_limit="false">
                                        <value_range lower_limit="1" lower_limit_type="inclusive" upper_limit="65535" upper_limit_type="inclusive"/>
                                    </value_set>
                                </fixed_field>
                            </record>
                            <variant name="GeometricPropertiesVariant" optional="false">
                                <vtag_field min_count="0" max_count="2" field_type_unsigned="unsigned byte"/>
                                <variant name="NoGeometricPropertiesVariant" optional="false">
                                    <vtag_field min_count="0" max_count="0" field_type_unsigned="unsigned byte"/>
                                </variant>
                                <record name="StaticGeometricPropertiesRec" optional="false">
                                    <array name="SensorPosition" optional="false">
                                        <fixed_field name="PositionVectorElement" optional="false" field_type="unsigned integer" field_units="meter">
                                            <scale_range real_lower_limit="-30.0" real_upper_limit="30.0" integer_function="round"/>
                                        </fixed_field>
                                        <dimension name="PositionVectorDimension" size="3"/>
                                    </array>
                                    <array name="UnitQuaternion" optional="false">
                                        <fixed_field name="UnitQuaternionElement" optional="false" field_type="unsigned integer" field_units="one">
                                            <scale_range real_lower_limit="-1.0" real_upper_limit="1.0" integer_function="round"/>
                                        </fixed_field>
                                        <dimension name="UnitQuaternionDimension" size="4"/>
                                    </array>
                                </record>
                                <record name="ManipulatorGeometricPropertiesRec" optional="false">
                                    <fixed_field name="SubsystemID" optional="false" field_type="unsigned short integer" field_units="one"/>
                                    <fixed_field name="NodeID" optional="false" field_type="unsigned byte" field_units="one"/>
                                    <fixed_field name="ComponentID" optional="false" field_type="unsigned byte" field_units="one"/>
                                    <fixed_field name="JointNumber" optional="false" field_type="unsigned byte" field_units="one"/>
                                    <array name="SensorPosition" optional="false">
                                        <fixed_field name="PositionVectorElement" optional="false" field_type="unsigned integer" field_units="meter">
                                            <scale_range real_lower_limit="-30.0" real_upper_limit="30.0" integer_function="round"/>
                                        </fixed_field>
                                        <dimension name="PositionVectorDimension" size="3"/>
                                    </array>
                                    <array name="UnitQuaternion" optional="false">
                                        <fixed_field name="UnitQuaternionElement" optional="false" field_type="unsigned integer" field_units="one">
                                            <scale_range real_lower_limit="-1.0" real_upper_limit="1.0" integer_function="round"/>
                                        </fixed_field>
                                        <dimension name="UnitQuaternionDimension" size="4"/>
                                    </array>
                                </record>
                            </variant>
                        </sequence>
                    </list>
                </body>
                <footer name="Footer"/>
            </message_def>
        </output_set>
    </message_set>
    <internal_events_set/>
    <protocol_behavior is_stateless="false">
        <start state_machine_name="accessControl.events.transport.ReceiveFSM" state_name="Receiving.Ready.NotControlled"/>
        <start state_machine_name="accessControl.events.transport.SendFSM" state_name="Sending"/>
        <state_machine name="accessControl.events.transport.ReceiveFSM">
            <state name="Receiving" initial_state="Ready">
                <state name="Ready" initial_state="NotControlled">
                    <state name="NotControlled" initial_state="Available">
                        <state name="Available"/>
                        <state name="NotAvailable"/>
                        <default_state>
                            <transition name="accessControl.events.transport.Receive">
                                <parameter type="QueryRangeSensorCapabilities" value="msg" interpretation="enveloped QueryRangeSensorCapabilities message"/>
                                <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                                <internal/>
                                <action name="sendReportRangeSensorCapabilities" interpretation="Send a Report Range Sensor Capabilities message">
                                    <argument value="msg"/>
                                    <argument value="transportData"/>
                                </action>
                            </transition>
                            <transition name="accessControl.events.transport.Receive">
                                <parameter type="QueryRangeSensorConfiguration" value="msg" interpretation="enveloped QueryRangeSensorConfiguration message"/>
                                <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                                <internal/>
                                <action name="sendReportRangeSensorConfiguration" interpretation="Send a ReportRangeSensorConfiguration message">
                                    <argument value="msg"/>
                                    <argument value="transportData"/>
                                </action>
                            </transition>
                            <transition name="accessControl.events.transport.Receive">
                                <parameter type="QuerySensorGeometricProperties" value="msg" interpretation="enveloped QuerySensorGeometricProperties message"/>
                                <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                                <internal/>
                                <action name="sendReportSensorGeometricProperties" interpretation="Send a ReportSensorGeometricProperties message">
                                    <argument value="msg"/>
                                    <argument value="transportData"/>
                                </action>
                            </transition>
                            <transition name="accessControl.events.transport.Receive">
                                <parameter type="QueryRangeSensorData" value="msg" interpretation="enveloped QueryRangeSensorData message"/>
                                <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                                <guard condition="isCoordinateTranformSupported( msg )" interpretation="True if the service supports coordinate system           transformations for data reports."/>
                                <internal/>
                                <action name="sendReportRangeSensorDataInRequestedCoordinateSystem" interpretation="Send a ReportRangeSensorData message using          the requested coordinate system">
                                    <argument value="msg"/>
                                    <argument value="transportData"/>
                                </action>
                            </transition>
                            <transition name="accessControl.events.transport.Receive">
                                <parameter type="QueryRangeSensorData" value="msg" interpretation="enveloped QueryRangeSensorData message"/>
                                <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                                <guard condition="! isCoordinateTranformSupported( msg )" interpretation="True if the service does not support           coordinate system transformations for data reports."/>
                                <internal/>
                                <action name="sendReportRangeSensorDataInNativeCoordinateSystem" interpretation="Send a ReportRangeSensorData message in           native coordinate system">
                                    <argument value="msg"/>
                                    <argument value="transportData"/>
                                </action>
                            </transition>
                            <transition name="accessControl.events.transport.Receive">
                                <parameter type="QueryRangeSensorCompressedData" value="msg" interpretation="enveloped QueryRangeSensorCompressedData message"/>
                                <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                                <guard condition="isCoordinateTranformSupported( msg )" interpretation="True if the service supports coordinate           system transformations for data reports."/>
                                <internal/>
                                <action name="sendReportRangeSensorCompressedDataInRequestedCoordinateSystem" interpretation="Send a ReportRangeSensorCompressedData           message using the requested coordinate system">
                                    <argument value="msg"/>
                                    <argument value="transportData"/>
                                </action>
                            </transition>
                            <transition name="accessControl.events.transport.Receive">
                                <parameter type="QueryRangeSensorCompressedData" value="msg" interpretation="enveloped QueryRangeSensorCompressedData message"/>
                                <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                                <guard condition="! isCoordinateTranformSupported( msg )" interpretation="True if the service does not support           coordinate system transformations for data reports."/>
                                <internal/>
                                <action name="sendReportRangeSensorCompressedDataInNativeCoordinateSystem" interpretation="Send a ReportRangeSensorCompressedData           message in native coordinate system">
                                    <argument value="msg"/>
                                    <argument value="transportData"/>
                                </action>
                            </transition>
                        </default_state>
                    </state>
                    <state name="Controlled" initial_state="Available">
                        <state name="Available"/>
                        <state name="NotAvailable"/>
                        <default_state>
                            <transition name="accessControl.events.transport.Receive">
                                <parameter type="SetRangeSensorConfiguration" value="msg" interpretation="enveloped SetRangeSensorConfiguration message"/>
                                <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                                <guard condition="accessControl.isControllingClient( transportData )" interpretation="True if the message that triggered the           transition is received from the client that is in control of this service."/>
                                <internal/>
                                <action name="sendConfirmSensorConfiguration" interpretation="Send ConfirmSensorConfiguration message">
                                    <argument value="msg"/>
                                    <argument value="transportData"/>
                                </action>
                                <action name="updateRangeSensorConfiguration" interpretation="Update the sensor user controllable           configuration parameters according to the ones specified.">
                                    <argument value="msg"/>
                                </action>
                            </transition>
                            <transition name="accessControl.events.transport.Receive">
                                <parameter type="QueryRangeSensorCapabilities" value="msg" interpretation="enveloped QueryRangeSensorCapabilities message"/>
                                <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                                <internal/>
                                <action name="sendReportRangeSensorCapabilities" interpretation="Send a Report Range Sensor Capabilities message">
                                    <argument value="msg"/>
                                    <argument value="transportData"/>
                                </action>
                            </transition>
                            <transition name="accessControl.events.transport.Receive">
                                <parameter type="QueryRangeSensorConfiguration" value="msg" interpretation="enveloped QueryRangeSensorConfiguration message"/>
                                <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                                <internal/>
                                <action name="sendReportRangeSensorConfiguration" interpretation="Send a ReportRangeSensorConfiguration message">
                                    <argument value="msg"/>
                                    <argument value="transportData"/>
                                </action>
                            </transition>
                            <transition name="accessControl.events.transport.Receive">
                                <parameter type="QuerySensorGeometricProperties" value="msg" interpretation="enveloped QuerySensorGeometricProperties message"/>
                                <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                                <internal/>
                                <action name="sendReportSensorGeometricProperties" interpretation="Send a ReportSensorGeometricProperties message">
                                    <argument value="msg"/>
                                    <argument value="transportData"/>
                                </action>
                            </transition>
                            <transition name="accessControl.events.transport.Receive">
                                <parameter type="QueryRangeSensorData" value="msg" interpretation="enveloped QueryRangeSensorData message"/>
                                <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                                <guard condition="isCoordinateTranformSupported( )" interpretation="True if the service supports coordinate           system transformations for data reports."/>
                                <internal/>
                                <action name="sendReportRangeSensorDataInRequestedCoordinateSystem" interpretation="Send a ReportRangeSensorData message using           the requested coordinate system">
                                    <argument value="msg"/>
                                    <argument value="transportData"/>
                                </action>
                            </transition>
                            <transition name="accessControl.events.transport.Receive">
                                <parameter type="QueryRangeSensorData" value="msg" interpretation="enveloped QueryRangeSensorData message"/>
                                <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                                <guard condition="! isCoordinateTranformSupported( msg )" interpretation="True if the service does not support           coordinate system transformations for data reports."/>
                                <internal/>
                                <action name="sendReportRangeSensorDataInNativeCoordinateSystem" interpretation="Send a ReportRangeSensorData message in           native coordinate system">
                                    <argument value="msg"/>
                                    <argument value="transportData"/>
                                </action>
                            </transition>
                            <transition name="accessControl.events.transport.Receive">
                                <parameter type="QueryRangeSensorCompressedData" value="msg" interpretation="enveloped QueryRangeSensorCompressedData message"/>
                                <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                                <guard condition="isCoordinateTranformSupported( msg )" interpretation="True if the service supports coordinate           system transformations for data reports."/>
                                <internal/>
                                <action name="sendReportRangeSensorCompressedDataInRequestedCoordinateSystem" interpretation="Send a ReportRangeSensorCompressedData message           using the requested coordinate system">
                                    <argument value="msg"/>
                                    <argument value="transportData"/>
                                </action>
                            </transition>
                            <transition name="accessControl.events.transport.Receive">
                                <parameter type="QueryRangeSensorCompressedData" value="msg" interpretation="enveloped QueryRangeSensorCompressedData message"/>
                                <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                                <guard condition="! isCoordinateTranformSupported( msg )" interpretation="True if the service does not support coordinate           system transformations for data reports."/>
                                <internal/>
                                <action name="sendReportRangeSensorCompressedDataInNativeCoordinateSystem" interpretation="Send a ReportRangeSensorCompressedData message           in native coordinate system">
                                    <argument value="msg"/>
                                    <argument value="transportData"/>
                                </action>
                            </transition>
                        </default_state>
                    </state>
                    <default_state/>
                </state>
            </state>
        </state_machine>
        <state_machine name="accessControl.events.transport.SendFSM">
            <state name="Sending"/>
        </state_machine>
    </protocol_behavior>
</service_def>

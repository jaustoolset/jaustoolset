<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<service_def name="Events" id="urn:jaus:jss:core:Events" version="1.1" xmlns="urn:jaus:jsidl:1.1" xmlns:ns2="urn:jaus:jsidl:plus">
    <description xml:space="preserve">This service is used to set up event notifications. Since this service does not contain any messages and data on which events can be setup, it is useful only when derived by other services that contain messages and data on which events can be defined.</description>
    <assumptions xml:space="preserve">Messages may be delayed, lost or reordered.</assumptions>
    <references>
        <inherits_from name="transport" id="urn:jaus:jss:core:Transport" version="1.1"/>
    </references>
    <message_set>
        <input_set>
            <message_def name="CreateEvent" message_id="01F0" is_command="true">
                <description xml:space="preserve">This message is used to set up an event. Field 1 is a local request ID that the event provider returns in the Confirm or Reject message.  Field 2 is the Event Type, which allows the requester  to specify the type of event  Periodic specifies that the event is a service connection request and should not be queued, in which case field 3 (Requested periodic rate) must be set to a non-zero value.  Event type of Every Change specifies that the corresponding Report message should be sent every time the data associated with that message changes. Field 4 contains the size of the Query message that is to specify the contents of the Report.  Field 5 contains the Query message (including its two byte header).</description>
                <header name="MsgHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" interpretation="A two byte field to hold the message ID of a message" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body">
                    <record name="CreateEventRec" optional="false">
                        <fixed_field name="RequestID" optional="false" interpretation="Local request ID for use in confirm event" field_type="unsigned byte" field_units="one"/>
                        <fixed_field name="EventType" optional="false" interpretation="Type of event" field_type="unsigned byte" field_units="one">
                            <value_set offset_to_lower_limit="false">
                                <value_enum enum_index="0" enum_const="Periodic (SC)"/>
                                <value_enum enum_index="1" enum_const="Every change"/>
                            </value_set>
                        </fixed_field>
                        <fixed_field name="RequestedPeriodicRate" optional="false" interpretation="Must be specified for periodic event, and set to 0 for every change" field_type="unsigned short integer" field_units="hertz">
                            <scale_range real_lower_limit="0" real_upper_limit="1092" integer_function="round"/>
                        </fixed_field>
                        <variable_length_field name="QueryMessage" optional="false" interpretation="The JAUS Query message to be used by the receiving component to generate the report message(s)" field_format="JAUS MESSAGE">
                            <count_field min_count="2" max_count="2147483647" field_type_unsigned="unsigned integer"/>
                        </variable_length_field>
                    </record>
                </body>
                <footer name="Footer"/>
            </message_def>
            <message_def name="CreateCommandEvent" message_id="01F6" is_command="true">
                <description xml:space="preserve">This message is used to set up a command event. Field 1 is a local request ID that the event provider returns in the Confirm or Reject message.  Field 2 is the maximum allowed execution time; any command not completed within its specified duration is considered a failure.  Field 3 contains the size of the Command message that is to specify the command to be executed.  Field 4 contains the encoded command message (including its two byte header).</description>
                <header name="MsgHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" interpretation="A two byte field to hold the message ID of a message" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body">
                    <record name="CreateEventRec" optional="false">
                        <fixed_field name="RequestID" optional="false" interpretation="Local request ID for use in confirm event" field_type="unsigned byte" field_units="one"/>
                        <fixed_field name="MaximumAllowedDuration" optional="false" interpretation="Any commands not executed within the maximum allowed time are considered a failure." field_type="unsigned integer" field_units="second"/>
                        <variable_length_field name="CommandMessage" optional="false" interpretation="The JAUS Command message  to be used by the receiving component to generate the command event." field_format="JAUS MESSAGE">
                            <count_field min_count="2" max_count="2147483647" field_type_unsigned="unsigned integer"/>
                        </variable_length_field>
                    </record>
                </body>
                <footer name="Footer"/>
            </message_def>
            <message_def name="UpdateEvent" message_id="01F1" is_command="true">
                <description xml:space="preserve">The Update Event message allows the requester to request a rate or change.  The format is the same as the Create Event, only with the addition of Event ID field to specify the event that needs updating.</description>
                <header name="MsgHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" interpretation="A two byte field to hold the message ID of a message" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body">
                    <record name="UpdateEventRec" optional="false">
                        <fixed_field name="RequestID" optional="false" interpretation="Local request ID for use in confirm event" field_type="unsigned byte" field_units="one"/>
                        <fixed_field name="EventType" optional="false" interpretation="Type of event" field_type="unsigned byte" field_units="one">
                            <value_set offset_to_lower_limit="false">
                                <value_enum enum_index="0" enum_const="Periodic (SC)"/>
                                <value_enum enum_index="1" enum_const="Every change"/>
                            </value_set>
                        </fixed_field>
                        <fixed_field name="RequestedPeriodicRate" optional="false" interpretation="Must be specified for periodic event, and set to 0 for every change" field_type="unsigned short integer" field_units="hertz">
                            <scale_range real_lower_limit="0" real_upper_limit="1092" integer_function="round"/>
                        </fixed_field>
                        <fixed_field name="EventID" optional="false" interpretation="Unique identifier of existing event to update" field_type="unsigned byte" field_units="one"/>
                        <variable_length_field name="QueryMessage" optional="false" interpretation="The JAUS Query message to be used by the receiving component to generate the report message(s)" field_format="JAUS MESSAGE">
                            <count_field min_count="2" max_count="2147483647" field_type_unsigned="unsigned integer"/>
                        </variable_length_field>
                    </record>
                </body>
                <footer name="Footer"/>
            </message_def>
            <message_def name="CancelEvent" message_id="01F2" is_command="true">
                <description xml:space="preserve">The Cancel Event message is used by the requester to cancel and/or request deletion of the specified event.</description>
                <header name="MsgHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" interpretation="A two byte field to hold the message ID of a message" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body">
                    <record name="CancelEventRec" optional="false">
                        <fixed_field name="RequestID" optional="false" interpretation="Local request id for use in confirm/reject message" field_type="unsigned byte" field_units="one"/>
                        <fixed_field name="EventID" optional="false" interpretation="unique id of the event to be removed" field_type="unsigned byte" field_units="one"/>
                    </record>
                </body>
                <footer name="Footer"/>
            </message_def>
            <message_def name="QueryEvents" message_id="21F0" is_command="false">
                <description xml:space="preserve">The Query Events message is used to request detail on events. Queries can be made by message ID, event type or Event ID.</description>
                <header name="MsgHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" interpretation="A two byte field to hold the message ID of a message" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body">
                    <variant name="QueryEventsVar" optional="false">
                        <vtag_field min_count="0" max_count="3" field_type_unsigned="unsigned byte"/>
                        <record name="MessageIDRec" optional="false">
                            <fixed_field name="MessageCode" optional="false" interpretation="Query Message ID of the Event message that the receiving component is inquiring about." field_type="unsigned short integer" field_units="one"/>
                        </record>
                        <record name="EventTypeRec" optional="false">
                            <fixed_field name="EventType" optional="false" interpretation="Type of event" field_type="unsigned byte" field_units="one">
                                <value_set offset_to_lower_limit="false">
                                    <value_enum enum_index="0" enum_const="Periodic (SC)"/>
                                    <value_enum enum_index="1" enum_const="Every change"/>
                                </value_set>
                            </fixed_field>
                        </record>
                        <record name="EventIDRec" optional="false">
                            <fixed_field name="EventID" optional="false" interpretation="Event ID returned by Confirm Event for details on specific event." field_type="unsigned byte" field_units="one"/>
                        </record>
                        <record name="AllEventsRec" optional="false">
                            <fixed_field name="AllEvents" optional="false" interpretation="All events should be reported." field_type="unsigned byte" field_units="one">
                                <value_set offset_to_lower_limit="false">
                                    <value_range lower_limit="0" lower_limit_type="inclusive" upper_limit="0" upper_limit_type="inclusive"/>
                                </value_set>
                            </fixed_field>
                        </record>
                    </variant>
                </body>
                <footer name="Footer"/>
            </message_def>
            <message_def name="QueryEventTimeout" message_id="21F2" is_command="false">
                <description xml:space="preserve">This message is used by clients to query the timeout period of this service.</description>
                <header name="MsgHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" interpretation="A two byte field to hold the message ID of a message" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body"/>
                <footer name="Footer"/>
            </message_def>
        </input_set>
        <output_set>
            <message_def name="ConfirmEventRequest" message_id="01F3" is_command="false">
                <description xml:space="preserve">The Confirm Event message is used to confirm an Event has been created/updated/or cancelled.  Field 1 represents the Request ID from the Create, Update, or Cancel message that initiated this message.  The Request ID's scope is local to the requesting client only.  Field 2, Event ID, is a globally unique ID that is established for the event. Field 3 is used to specify the closest rate that the service can provide if it cannot match the requested rate.</description>
                <header name="MsgHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" interpretation="A two byte field to hold the message ID of a message" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body">
                    <record name="ConfirmEventRequestRec" optional="false">
                        <fixed_field name="RequestID" optional="false" interpretation="ID of the event maintenance request (Create, Update, or Cancel)" field_type="unsigned byte" field_units="one"/>
                        <fixed_field name="EventID" optional="false" interpretation="The identifier of the specific event" field_type="unsigned byte" field_units="one"/>
                        <fixed_field name="ConfirmedPeriodicRate" optional="false" interpretation="Requested rate or closest to requested rate" field_type="unsigned short integer" field_units="hertz">
                            <scale_range real_lower_limit="0" real_upper_limit="1092" integer_function="round"/>
                        </fixed_field>
                    </record>
                </body>
                <footer name="Footer"/>
            </message_def>
            <message_def name="RejectEventRequest" message_id="01F4" is_command="false">
                <description xml:space="preserve">The Reject Event Request message is used to reject an Event creation, update or cancellation. Field 2 represents the Request ID from the Create, Update, or Cancel message that initiated this message. The Request ID's scope is local to the requesting client only. Field 4, Event ID, is a globally unique ID that is established for the event.</description>
                <header name="MsgHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" interpretation="A two byte field to hold the message ID of a message" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body">
                    <record name="RejectEventRequestRec" optional="false">
                        <presence_vector field_type_unsigned="unsigned byte"/>
                        <fixed_field name="RequestID" optional="false" interpretation="ID of the event maintenance request (create, update, or cancel)" field_type="unsigned byte" field_units="one"/>
                        <fixed_field name="ResponseCode" optional="true" field_type="unsigned byte" field_units="one">
                            <value_set offset_to_lower_limit="false">
                                <value_enum enum_index="1" enum_const="periodic events not               supported"/>
                                <value_enum enum_index="2" enum_const="change based events not               supported"/>
                                <value_enum enum_index="3" enum_const="connection refused"/>
                                <value_enum enum_index="4" enum_const="invalid event setup"/>
                                <value_enum enum_index="5" enum_const="message not supported"/>
                                <value_enum enum_index="6" enum_const="error, invalid event ID for               update event               request"/>
                            </value_set>
                        </fixed_field>
                        <fixed_length_string name="ErrorMessage" string_length="80" optional="true" interpretation="String for additional information"/>
                    </record>
                </body>
                <footer name="Footer"/>
            </message_def>
            <message_def name="ReportEvents" message_id="41F0" is_command="false">
                <description xml:space="preserve">This message is used to report the active event requests that match the requirements provided in the QueryEvents message.</description>
                <header name="MsgHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" interpretation="A two byte field to hold the message ID of a message" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body">
                    <list name="EventList" optional="false" interpretation="List of reported events">
                        <count_field min_count="0" max_count="255" field_type_unsigned="unsigned byte"/>
                        <record name="ReportEventRec" optional="false">
                            <fixed_field name="EventType" optional="false" interpretation="Type of event" field_type="unsigned byte" field_units="one">
                                <value_set offset_to_lower_limit="false">
                                    <value_enum enum_index="0" enum_const="Periodic (SC)"/>
                                    <value_enum enum_index="1" enum_const="Every change"/>
                                </value_set>
                            </fixed_field>
                            <fixed_field name="EventID" optional="false" interpretation="Unique identifier of event" field_type="unsigned byte" field_units="one"/>
                            <variable_length_field name="QueryMessage" optional="false" interpretation="The JAUS Query message to be used by the receiving component to generate the Report message(s)" field_format="JAUS MESSAGE">
                                <count_field min_count="2" max_count="2147483647" field_type_unsigned="unsigned integer"/>
                            </variable_length_field>
                        </record>
                    </list>
                </body>
                <footer name="Footer"/>
            </message_def>
            <message_def name="Event" message_id="41F1" is_command="false">
                <description xml:space="preserve">The Event message is sent when event is triggered. It includes the Event ID and a sequence number to allow the client to keep track of event processing.</description>
                <header name="MsgHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" interpretation="A two byte field to hold the message ID of a message" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body">
                    <record name="EventRec" optional="false">
                        <fixed_field name="EventID" optional="false" interpretation="Unique identifier of the enclosed event" field_type="unsigned byte" field_units="one"/>
                        <fixed_field name="SequenceNumber" optional="false" interpretation="Sequential count of the number of times this event has been issued" field_type="unsigned byte" field_units="one"/>
                        <variable_length_field name="ReportMessage" optional="false" interpretation="The JAUS Report message including the message header" field_format="JAUS MESSAGE">
                            <count_field min_count="2" max_count="2147483647" field_type_unsigned="unsigned integer"/>
                        </variable_length_field>
                    </record>
                </body>
                <footer name="Footer"/>
            </message_def>
            <message_def name="CommandEvent" message_id="41F6" is_command="false">
                <description xml:space="preserve">The CommandEvent message is sent when a command specified by a previous Create Command Event message has completed or expired.  It includes the Event ID and command result.</description>
                <header name="MsgHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" interpretation="A two byte field to hold the message ID of a message" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body">
                    <record name="EventRec" optional="false">
                        <fixed_field name="EventID" optional="false" interpretation="Unique identifier of the enclosed event" field_type="unsigned byte" field_units="one"/>
                        <fixed_field name="CommandResult" optional="false" field_type="unsigned byte" field_units="one">
                            <value_set offset_to_lower_limit="false">
                                <value_enum enum_index="0" enum_const="SUCCESSFUL"/>
                                <value_enum enum_index="1" enum_const="UNSUCCESSFUL"/>
                            </value_set>
                        </fixed_field>
                    </record>
                </body>
                <footer name="Footer"/>
            </message_def>
            <message_def name="ReportEventTimeout" message_id="41F2" is_command="false">
                <description xml:space="preserve">This message is used to report the timeout period of this service.</description>
                <header name="MsgHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" interpretation="A two byte field to hold the message ID of a message" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body">
                    <record name="ReportTimoutRec" optional="false">
                        <fixed_field name="Timeout" optional="false" field_type="unsigned byte" field_units="minute">
                            <value_set offset_to_lower_limit="false">
                                <value_enum enum_index="0" enum_const="TIMEOUT_FEATURE _DISABLED"/>
                                <value_range lower_limit="1" lower_limit_type="inclusive" upper_limit="255" upper_limit_type="inclusive"/>
                            </value_set>
                        </fixed_field>
                    </record>
                </body>
                <footer name="Footer"/>
            </message_def>
        </output_set>
    </message_set>
    <internal_events_set>
        <event_def name="EventOccurred">
            <description xml:space="preserve">Received when an event occurs.</description>
            <header name="Header"/>
            <body name="Body"/>
            <footer name="Footer"/>
        </event_def>
        <event_def name="EventError">
            <description xml:space="preserve">Received when an event error occurs.</description>
            <header name="Header"/>
            <body name="Body"/>
            <footer name="Footer"/>
        </event_def>
        <event_def name="Timeout">
            <description xml:space="preserve">Received when a timeout occurs.</description>
            <header name="Header"/>
            <body name="Body"/>
            <footer name="Footer"/>
        </event_def>
        <event_def name="CommandCompleted">
            <description xml:space="preserve">Must occur when a command event is completed.</description>
            <header name="Header"/>
            <body name="Body"/>
            <footer name="Footer"/>
        </event_def>
        <event_def name="CommandExpired">
            <description xml:space="preserve">Must occur when a command event does not complete within its specified period of time.</description>
            <header name="Header"/>
            <body name="Body"/>
            <footer name="Footer"/>
        </event_def>
    </internal_events_set>
    <protocol_behavior is_stateless="false">
        <start state_machine_name="transport.ReceiveFSM" state_name="Receiving.Ready"/>
        <start state_machine_name="transport.SendFSM" state_name="Sending"/>
        <state_machine name="transport.ReceiveFSM">
            <state name="Receiving" initial_state="Ready">
                <state name="Ready">
                    <transition name="transport.Receive">
                        <parameter type="QueryEvents" value="msg"/>
                        <parameter type="Receive.Body.ReceiveRec" value="transportData"/>
                        <internal/>
                        <action name="transport.Send" interpretation="Send Report Events               message to the               component that sent the query">
                            <argument value=" 'ReportEvents' "/>
                            <argument value="msg"/>
                            <argument value="transportData"/>
                        </action>
                    </transition>
                    <transition name="transport.Receive">
                        <parameter type="QueryEventTimeout" value="msg"/>
                        <parameter type="Receive.Body.ReceiveRec" value="transportData"/>
                        <internal/>
                        <action name="transport.Send" interpretation="Send Report Event               Timeout message to the               component that sent the               query">
                            <argument value=" 'ReportEventTimeout' "/>
                            <argument value="msg"/>
                            <argument value="transportData"/>
                        </action>
                    </transition>
                    <transition name="transport.Receive">
                        <parameter type="CreateEvent" value="msg"/>
                        <parameter type="Receive.Body.ReceiveRec" value="transportData"/>
                        <guard condition="isSupported(msg) &amp;&amp; !               eventExists(msg)" interpretation="True if parameters are supported               and the event does not already exist."/>
                        <internal/>
                        <action name="createEvent" interpretation="create the event">
                            <argument value="msg"/>
                        </action>
                        <action name="transport.Send" interpretation="Send Confirm Event               Request               message">
                            <argument value=" 'ConfirmEventRequest' "/>
                            <argument value="msg"/>
                            <argument value="transportData"/>
                        </action>
                        <action name="resetEventTimer" interpretation=" Reset the timeout               period for                 the recurring event."/>
                    </transition>
                    <transition name="transport.Receive">
                        <parameter type="CreateEvent" value="msg"/>
                        <parameter type="Receive.Body.ReceiveRec" value="transportData"/>
                        <guard condition="isSupported(msg) &amp;&amp;               eventExists(msg)" interpretation="True if parameters are supported               and the event already exists."/>
                        <internal/>
                        <action name="updateEvent" interpretation="update the event">
                            <argument value="msg"/>
                        </action>
                        <action name="transport.Send" interpretation="Send Confirm Event               Request               message">
                            <argument value=" 'ConfirmEventRequest' "/>
                            <argument value="msg"/>
                            <argument value="transportData"/>
                        </action>
                        <action name="resetEventTimer" interpretation=" Reset the timeout               period for                 the recurring event."/>
                    </transition>
                    <transition name="transport.Receive">
                        <parameter type="CreateEvent" value="msg"/>
                        <parameter type="Receive.Body.ReceiveRec" value="transportData"/>
                        <guard condition="! isSupported(msg)" interpretation="True if               parameters are not               supported."/>
                        <internal/>
                        <action name="transport.Send" interpretation="Send Reject Event               Request message">
                            <argument value=" 'RejectEventRequest' "/>
                            <argument value="msg"/>
                            <argument value="transportData"/>
                        </action>
                    </transition>
                    <transition name="transport.Receive">
                        <parameter type="UpdateEvent" value="msg"/>
                        <parameter type="Receive.Body.ReceiveRec" value="transportData"/>
                        <guard condition="isSupported(msg) &amp;&amp;               eventExists(msg)" interpretation="True if parameters are supported               and if the specified event exists"/>
                        <internal/>
                        <action name="updateEvent" interpretation="update the event">
                            <argument value="msg"/>
                        </action>
                        <action name="transport.Send" interpretation="Send Confirm Event               Request               message">
                            <argument value=" 'ConfirmEventRequest' "/>
                            <argument value="msg"/>
                            <argument value="transportData"/>
                        </action>
                        <action name="resetEventTimer" interpretation=" Reset the timeout               period for                 the recurring event."/>
                    </transition>
                    <transition name="transport.Receive">
                        <parameter type="UpdateEvent" value="msg"/>
                        <parameter type="Receive.Body.ReceiveRec" value="transportData"/>
                        <guard condition="! isSupported(msg) || ! eventExists(msg)"/>
                        <internal/>
                        <action name="transport.Send" interpretation="Send Reject Event               Request message">
                            <argument value=" 'RejectEventRequest' "/>
                            <argument value="msg"/>
                            <argument value="transportData"/>
                        </action>
                    </transition>
                    <transition name="transport.Receive">
                        <parameter type="CancelEvent" value="msg"/>
                        <parameter type="Receive.Body.ReceiveRec" value="transportData"/>
                        <guard condition="! eventExists(msg)"/>
                        <internal/>
                        <action name="transport.Send" interpretation="Send Reject Event               Request message">
                            <argument value=" 'RejectEventRequest' "/>
                            <argument value="msg"/>
                            <argument value="transportData"/>
                        </action>
                    </transition>
                    <transition name="transport.Receive">
                        <parameter type="CancelEvent" value="msg"/>
                        <parameter type="Receive.Body.ReceiveRec" value="transportData"/>
                        <guard condition="eventExists(msg)"/>
                        <internal/>
                        <action name="cancelEvent" interpretation="cancel the event">
                            <argument value="msg"/>
                        </action>
                        <action name="transport.Send" interpretation="Send Confirm Event               Request               message">
                            <argument value=" 'ConfirmEventRequest' "/>
                            <argument value="msg"/>
                            <argument value="transportData"/>
                        </action>
                        <action name="stopEventTimer" interpretation="Stop evaluating the               recurring                 event for timeouts."/>
                    </transition>
                    <transition name="EventOccurred">
                        <guard condition="eventExists()"/>
                        <internal/>
                        <action name="sendEvent" interpretation="send an event notification"/>
                    </transition>
                    <transition name="EventError">
                        <guard condition="eventExists()"/>
                        <internal/>
                        <action name="sendRejectEventRequest" interpretation="Send Reject               Event Request message"/>
                    </transition>
                    <transition name="Timeout">
                        <internal/>
                        <action name="cancelEvent" interpretation="cancel the event"/>
                        <action name="transport.Send" interpretation="Send Confirm Event               Request               message">
                            <argument value=" 'ConfirmEventRequest' "/>
                        </action>
                        <action name="stopEventTimer" interpretation="Stop evaluating the               recurring                  event for timeouts."/>
                    </transition>
                    <transition name="transport.Receive">
                        <parameter type="CreateCommandEvent" value="msg"/>
                        <parameter type="Receive.Body.ReceiveRec" value="transportData"/>
                        <guard condition="isCommandSupported(msg) &amp;&amp; !eventExists(msg)"/>
                        <internal/>
                        <action name="createCommandEvent" interpretation="Add the encapsulated command message to the input message queue of this service so that it can be received and processed by the extensions of this service (derived services)">
                            <argument value="msg"/>
                        </action>
                        <action name="transport.Send" interpretation="Send Confirm Event Request message">
                            <argument value=" 'ConfirmEventRequest' "/>
                            <argument value="msg"/>
                            <argument value="transportData"/>
                        </action>
                        <action name="startCommandTimer" interpretation="Start a timer for the specified CommandEvent"/>
                    </transition>
                    <transition name="transport.Receive">
                        <parameter type="CreateCommandEvent" value="msg"/>
                        <parameter type="Receive.Body.ReceiveRec" value="transportData"/>
                        <guard condition="isCommandSupported(msg) &amp;&amp; eventExists(msg)"/>
                        <internal/>
                        <action name="updateCommandEvent" interpretation="Update the command event">
                            <argument value="msg"/>
                        </action>
                        <action name="transport.Send" interpretation="Send Confirm Event Request message">
                            <argument value=" 'ConfirmEventRequest' "/>
                            <argument value="msg"/>
                            <argument value="transportData"/>
                        </action>
                        <action name="startCommandTimer" interpretation="Start a timer for the specified CommandEvent"/>
                    </transition>
                    <transition name="transport.Receive">
                        <parameter type="CreateCommandEvent" value="msg"/>
                        <parameter type="Receive.Body.ReceiveRec" value="transportData"/>
                        <guard condition="!isCommandSupported(msg)" interpretation="False. This condition should be overridden by derived services to allow command events"/>
                        <internal/>
                        <action name="transport.Send" interpretation="Send Reject Event Request message">
                            <argument value=" 'RejectEventRequest' "/>
                            <argument value="msg"/>
                            <argument value="transportData"/>
                        </action>
                    </transition>
                    <transition name="CommandCompleted">
                        <guard condition="eventExists()"/>
                        <internal/>
                        <action name="stopCommandTimer" interpretation="Stop the timer for the specified CommandEvent"/>
                        <action name="sendCommandEvent" interpretation="Send a CommandEvent notification"/>
                    </transition>
                    <transition name="CommandExpired">
                        <internal/>
                        <action name="sendCommandEvent" interpretation="Send a CommandEvent notification"/>
                    </transition>
                </state>
            </state>
        </state_machine>
        <state_machine name="transport.SendFSM">
            <state name="Sending"/>
        </state_machine>
    </protocol_behavior>
</service_def>

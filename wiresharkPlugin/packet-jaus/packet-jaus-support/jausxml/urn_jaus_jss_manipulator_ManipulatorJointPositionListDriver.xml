<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<service_def name="ManipulatorJointPositionListDriver" id="urn:jaus:jss:manipulator:ManipulatorJointPositionListDriver" version="2.0" xmlns="urn:jaus:jsidl:1.1" xmlns:ns2="urn:jaus:jsidl:plus">
    <description xml:space="preserve">The function of the Joint Position List Driver is to perform closed-loop joint position control through a sequence of targets. The sequence of targets is specified by one or more SetElement messages, as defined by the List Manager Service.  To ensure backward compatibility with 1.0 implementations of this service, it is recommended that this service be co-located on the same component as a Manipulator Specification Service and a Manipulator Joint Motion Profile Service.</description>
    <assumptions xml:space="preserve">Messages may be delayed, lost, or reordered.</assumptions>
    <references>
        <inherits_from name="manipulatorListDriver" id="urn:jaus:jss:manipulator:ManipulatorListDriver" version="2.0"/>
    </references>
    <message_set>
        <input_set>
            <message_def name="QueryCommandedJointPositions" message_id="2608" is_command="false">
                <description xml:space="preserve">This message shall cause the receiving service to reply to the requestor with a ID 4608h: ReportCommandedJointPositions message.</description>
                <header name="AppHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" interpretation="A two byte field to hold the message ID of a message" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body"/>
                <footer name="Footer"/>
            </message_def>
        </input_set>
        <output_set>
            <message_def name="ReportCommandedJointPositions" message_id="4608" is_command="false">
                <description xml:space="preserve">This message provides the receiver with the commanded joint positions.</description>
                <header name="AppHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" interpretation="A two byte field to hold the message ID of a message" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body">
                    <list name="JointPositionList" optional="false">
                        <count_field min_count="0" max_count="255" field_type_unsigned="unsigned byte"/>
                        <record name="JointPositionRec" optional="false">
                            <variable_field name="JointPosition" optional="false" interpretation="Scaled integer representing the command position for this joint.  Each joint must have a corresponding entry in the list.  Units and scale range are based on the joint type.">
                                <type_and_units_field>
                                    <type_and_units_enum name="radian" index="1" field_type="unsigned integer" field_units="radian">
                                        <scale_range real_lower_limit="-25.132741228718345" real_upper_limit="25.132741228718345" integer_function="round"/>
                                    </type_and_units_enum>
                                    <type_and_units_enum name="meter" index="2" field_type="unsigned integer" field_units="meter">
                                        <scale_range real_lower_limit="-10" real_upper_limit="10" integer_function="round"/>
                                    </type_and_units_enum>
                                </type_and_units_field>
                            </variable_field>
                        </record>
                    </list>
                </body>
                <footer name="Footer"/>
            </message_def>
        </output_set>
    </message_set>
    <internal_events_set/>
    <protocol_behavior is_stateless="false">
        <start state_machine_name="manipulatorListDriver.listManager.management.accessControl.events.transport.ReceiveFSM" state_name="Receiving.Ready.NotControlled"/>
        <start state_machine_name="manipulatorListDriver.listManager.management.accessControl.events.transport.SendFSM" state_name="Sending"/>
        <state_machine name="manipulatorListDriver.listManager.management.accessControl.events.transport.ReceiveFSM">
            <state name="Receiving" initial_state="Ready">
                <state name="Ready" initial_state="NotControlled">
                    <state name="NotControlled" initial_state="Available">
                        <state name="Available" initial_state="Standby">
                            <state name="Standby"/>
                        </state>
                        <state name="NotAvailable" initial_state="Init">
                            <state name="Init"/>
                            <state name="Failure"/>
                            <state name="Shutdown"/>
                            <state name="Emergency"/>
                        </state>
                        <default_state>
                            <transition name="manipulatorListDriver.listManager.management.accessControl.events.transport.Receive">
                                <parameter type="QueryCommandedJointPositions" value="msg" interpretation="enveloped query commanded Joint Positions message"/>
                                <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                                <guard condition="targetExists()" interpretation="True is a valid target position has been received."/>
                                <internal/>
                                <action name="manipulatorListDriver.listManager.management.accessControl.events.transport.Send" interpretation="Send a Report Commanded Joint Positions message">
                                    <argument value=" 'ReportCommandedJointPositions' "/>
                                    <argument value="transportData"/>
                                </action>
                            </transition>
                        </default_state>
                    </state>
                    <state name="Controlled" initial_state="Available">
                        <state name="Available" initial_state="Standby">
                            <state name="Standby"/>
                            <state name="Ready">
                                <exit>
                                    <action name="stopMotion" interpretation="Stop motion of the manipulator."/>
                                </exit>
                                <transition name="manipulatorListDriver.listManager.management.accessControl.events.transport.Receive">
                                    <parameter type="ExecuteList" value="msg" interpretation="enveloped execute list message"/>
                                    <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                                    <guard condition="manipulatorListDriver.listManager.management.accessControl.isControllingClient( transportData )                      &amp;&amp; listManager.elementExists( msg ) &amp;&amp; isListValid()" interpretation="True if the message that triggered the transition                      is received from the client that is in control of this service AND                       True if the Element UID specified in the message that triggered                        the transition exists in the list AND True if the list contains                        Manipulator Joint Position messages."/>
                                    <internal/>
                                    <action name="executeTargetList" interpretation="Begin sequential execution of the target list                      starting at the specified element.">
                                        <argument value="msg"/>
                                    </action>
                                </transition>
                            </state>
                        </state>
                        <state name="NotAvailable" initial_state="Emergency">
                            <state name="Emergency"/>
                        </state>
                        <default_state>
                            <transition name="manipulatorListDriver.listManager.management.accessControl.events.transport.Receive">
                                <parameter type="QueryCommandedJointPositions" value="msg" interpretation="enveloped query commanded Joint Positions message"/>
                                <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                                <guard condition="targetExists()" interpretation="True is a valid target position has been received."/>
                                <internal/>
                                <action name="manipulatorListDriver.listManager.management.accessControl.events.transport.Send" interpretation="Send a Report Commanded Joint Positions message">
                                    <argument value=" 'ReportCommandedJointPositions' "/>
                                    <argument value="transportData"/>
                                </action>
                            </transition>
                            <transition name="manipulatorListDriver.listManager.management.accessControl.events.transport.Receive">
                                <parameter type="SetElement" value="msg" interpretation="enveloped set element message"/>
                                <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                                <guard condition="isControllingClient(transportData) &amp;&amp;                    listManager.isValidElementRequest(msg) &amp;&amp;                    isElementSupported(msg)" interpretation="True if the message that triggered the transition is                    received from the client that is in control of this service AND True                    if the resulting list will not be invalid as defined by the List                    Manager Service description and the receiving entity has sufficient                    memory to store the element(s) AND True if the message that triggered                   the transition contains payload(s) of valid serialized Set Joint                    Positions message(s)."/>
                                <internal/>
                                <action name="setElement" interpretation="Store the given targets(s) in the target list with                    sequence specified by the previous and next element UIDs.  If this                    action represents an insert or append into an existing list, the                    service should modify the NextUID of the previous element and/or the                    PreviousUID of the next element to reflect the updated sequence">
                                    <argument value="msg"/>
                                </action>
                                <action name="manipulatorListDriver.listManager.management.accessControl.events.transport.Send" interpretation="Send a Confirm Element Request message">
                                    <argument value=" 'ConfirmElementRequest' "/>
                                    <argument value="transportData"/>
                                </action>
                            </transition>
                        </default_state>
                    </state>
                    <default_state/>
                </state>
            </state>
        </state_machine>
        <state_machine name="manipulatorListDriver.listManager.management.accessControl.events.transport.SendFSM">
            <state name="Sending"/>
        </state_machine>
    </protocol_behavior>
</service_def>
